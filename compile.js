// Generated by CoffeeScript 1.7.1
var coffee, literalId, pistachios;

coffee = require('coffee-script');

pistachios = /\{((?:[\w|-]*)?(?:\#[\w|-]*)?(?:(?:\.[\w|-]*)*)(?:\[(?:\b[\w|-]*\b)(?:\=[\"|\']?.*[\"|\']?)\])*)\{([^{}]*)\}\s*\}/g;

literalId = 0;

module.exports = function(literal) {
  var compiledExpr, dataExprCount, dataExprs;
  if ('string' !== typeof literal) {
    return literal;
  } else {
    dataExprs = {};
    dataExprCount = 0;
    compiledExpr = literal.replace(pistachios, function(_, markup, expr) {
      var e, embedView, preparedExpr, processedExpr, _ref;
      embedView = false;
      if (/^> ?/.test(expr)) {
        expr = expr.substr(1).trim();
        embedView = true;
      }
      preparedExpr = expr.replace(/#\((?:[^)]*)\)/g, function(dataExpr) {
        var dataExprId;
        dataExprId = "__expr-" + literalId + "-" + dataExprCount;
        dataExprs[dataExprId] = dataExpr;
        dataExprCount++;
        return "'" + dataExprId + "'";
      });
      compiledExpr = (function() {
        try {
          return coffee.compile(preparedExpr.replace(/\\"/g, "\""), {
            bare: true
          }).replace(/"/g, '\\"');
        } catch (_error) {
          e = _error;
          console.error(e);
          return preparedExpr;
        }
      })();
      if (((_ref = compiledExpr.match(/;/g)) != null ? _ref.length : void 0) > 1) {
        throw new SyntaxError('Only one expression is allowed.');
      } else {
        compiledExpr = compiledExpr.replace(/\n|;/g, '');
      }
      processedExpr = compiledExpr.replace(/\'(__expr-[0-9]+-[0-9]+)\'/g, function(_, placeholder) {
        return dataExprs[placeholder];
      });
      return "{" + markup + "{" + (embedView ? '> ' : '') + processedExpr + "}}";
    });
    literalId++;
    return compiledExpr;
  }
};
